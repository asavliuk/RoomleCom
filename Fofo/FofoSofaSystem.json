{
  "id": "sitzfeldt:FofoSofaSystem",
  "onUpdate": "
        leftSideDockable = true;
        rightSideDockable = true;
        if (elementType == 'FofoEckeLinks') {
            leftSideDockable = false;
        }
        if (elementType == 'FofoEckeRechts') {
            rightSideDockable = false;
        }
        elementWidth = 1100;
        if (elementType == 'FofoMittelteil') {
            elementWidth = 850;
        }
        elementDepth = 1100;
        childDockShift = 0;
        if (elementType == 'FofoEckeLinks') {
            childDockShift = 250;
        }
    ",
  "parameters": [
    {
      "key": "elementType",
      "labels": {
        "en": "Sofa-Elemnttyp",
        "de": "Sofa-Elemnttyp"
      },
      "defaultValue": "FofoMittelteil",
      "type": "String",
      "enabled": true,
      "visible": true,
      "highlighted": true,
      "valueObjects": [
        {
          "value": "FofoMittelteil",
          "labels": {
            "de": "Fofo Mittelteil",
            "en": "Fofo Mittelteil"
          },
          "thumbnail": "https://roomle-catalogs.storage.googleapis.com/eb6ce48f-8f6b-4b04-ac5b-e749553e984d/components/FofoMittelteil/perspectiveImage.png"
        },
        {
          "condition": "(nothingOnLeft)",
          "value": "FofoEckeLinks",
          "labels": {
            "de": "Fofo Ecke Links",
            "en": "Fofo Ecke Links"
          },
          "thumbnail": "https://roomle-catalogs.storage.googleapis.com/eb6ce48f-8f6b-4b04-ac5b-e749553e984d/components/FofoLinks/perspectiveImage.png"
        },
        {
          "condition": "(nothingOnRight)",
          "value": "FofoEckeRechts",
          "labels": {
            "de": "Fofo Ecke Rechts",
            "en": "Fofo Ecke Rechts"
          },
          "thumbnail": "https://roomle-catalogs.storage.googleapis.com/eb6ce48f-8f6b-4b04-ac5b-e749553e984d/components/FofoEckeRechts/perspectiveImage.png"
        }
      ]
    },
    {
      "key": "SofaMat",
      "global": true,
      "type": "Material",
      "visible": false,
      "defaultValue": "sitzfeldt:Fino_mittelgrau",
      "validValues": [
        "sitzfeldt:Natura_weiss",
        "sitzfeldt:Natura_hellgrau",
        "sitzfeldt:Natura_beige",
        "sitzfeldt:LederPur_dark_grey",
        "sitzfeldt:LederPur_dark_brown",
        "sitzfeldt:LederPur_schwarzV2",
        "sitzfeldt:Leder_Pur_beige_2",
        "sitzfeldt:Pur_schwarz_test",
        "sitzfeldt:Natura_rot",
        "sitzfeldt:Natura_flieder",
        "sitzfeldt:Natura_gruen",
        "sitzfeldt:Natura_grau",
        "sitzfeldt:Natura_dunkelblau",
        "sitzfeldt:Natura_dunkelgrau",
        "sitzfeldt:Nobile_weiss",
        "sitzfeldt:Nobile_beige",
        "sitzfeldt:Nobile_braun",
        "sitzfeldt:Nobile_hellgrau",
        "sitzfeldt:Nobile_dunkelgrau",
        "sitzfeldt:Klassik_tomaat",
        "sitzfeldt:Klassik_braun",
        "sitzfeldt:Klassik_schwarz",
        "sitzfeldt:Klassik_wood",
        "sitzfeldt:Klassik_taupe",
        "sitzfeldt:Klassik_dunkelgrau",
        "sitzfeldt:Modesto_beige",
        "sitzfeldt:Modesto_hellbraun",
        "sitzfeldt:Modesto_senfgelb",
        "sitzfeldt:Modesto_orange_grau",
        "sitzfeldt:Modesto_rot_orange",
        "sitzfeldt:Modesto_blau_braun",
        "sitzfeldt:Modesto_hellgrau",
        "sitzfeldt:Modesto_dunkelgrau",
        "sitzfeldt:Modesto_schwarz",
        "sitzfeldt:Fino_hellgrau",
        "sitzfeldt:Fino_mittelgrau",
        "sitzfeldt:Fino_dunkelgrau",
        "sitzfeldt:Fino_beige",
        "sitzfeldt:Fino_grau_braun",
        "sitzfeldt:Fino_hellblau",
        "sitzfeldt:Fino_altrosa",
        "sitzfeldt:Fino_mintgruen",
        "sitzfeldt:Fino_gelb",
        "sitzfeldt:Fino_rot",
        "sitzfeldt:Lana_hellgrau",
        "sitzfeldt:Lana_mittelgrau",
        "sitzfeldt:Lana_schwarz",
        "sitzfeldt:Lana_beige",
        "sitzfeldt:Lana_braun",
        "sitzfeldt:Lana_dunkelbraun",
        "sitzfeldt:Lana_hellgruen",
        "sitzfeldt:Lana_orange",
        "sitzfeldt:Lana_gruen",
        "sitzfeldt:Lana_mittelblau"
      ]
    },
    {
      "key": "nothingOnLeft",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "nothingOnRight",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "neighbourIsKombi",
      "defaultValue": false,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "leftDockAvaliable",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "rightDockAvaliable",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "allowKombiLeft",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "allowKombiRight",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "allowStraightLeft",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "allowStraightRight",
      "defaultValue": true,
      "type": "Boolean",
      "visible": false
    },
    {
      "key": "kombiCounterLeft",
      "defaultValue": 0,
      "enabled": true,
      "type": "Integer",
      "visible": false
    },
    {
      "key": "kombiCounterRight",
      "defaultValue": 0,
      "enabled": true,
      "type": "Integer",
      "visible": false
    }
  ],
  "subComponents": [
    {
      "internalId": "FofoMittelteil",
      "componentId": "sitzfeldt:FofoMittelteil",
      "assignments": {
        "SofaMat": "SofaMat"
      }
    },
    {
      "internalId": "FofoEckeLinks",
      "componentId": "sitzfeldt:FofoLinks",
      "assignments": {
        "SofaMat": "SofaMat"
      }
    },
    {
      "internalId": "FofoEckeRechts",
      "componentId": "sitzfeldt:FofoEckeRechts",
      "assignments": {
        "SofaMat": "SofaMat"
      }
    }
  ],
  "geometry": "
    if (elementType == 'FofoMittelteil') {
        SubComponent('FofoMittelteil');
        logo_x = -142;
        logo_z = -1122;
    }
    if (elementType == 'FofoEckeLinks') {
        SubComponent('FofoEckeLinks');
        logo_x = 106;
        logo_z = -1120;
    }
    if (elementType == 'FofoEckeRechts') {
        SubComponent('FofoEckeRechts');
        logo_x = 110;
        logo_z = -1124;
    }
    # Logo label
        AddMesh(Vector3f[{1004.1,-112.3,9.4},{1004.6,-112.3,10.3},{992.8,-112.3,15.8},{992.4,-112.3,14.9},{1004.1,-149.3,9.4},{992.4,-149.3,14.9},{992.8,-149.3,15.8},{1004.6,-149.3,10.3},{1004.1,-149.3,9.4},{1004.1,-149.3,9.4},{992.4,-149.3,14.9},{992.4,-149.3,14.9},{992.8,-112.3,15.8},{992.8,-112.3,15.8},{992.8,-149.3,15.8},{992.8,-149.3,15.8},{1004.6,-149.3,10.3},{1004.6,-149.3,10.3},{1004.1,-112.3,9.4},{1004.1,-112.3,9.4},{1004.6,-112.3,10.3},{1004.6,-112.3,10.3},{992.4,-112.3,14.9},{992.4,-112.3,14.9}],[18,13,20,13,18,23,8,15,10,15,8,16,19,11,22,11,19,9,3,14,12,14,3,5,2,17,21,17,2,6,1,4,0,4,1,7],Vector2f[{0.016,0.6289},{0.0043,0.6419},{0.9846,0.2958},{0.0164,0.2957},{0.9846,0.6289},{0.9842,0.2957},{0.0164,0.2958},{0.9963,0.6419},{0.9846,0.6289},{0.9846,0.6289},{0.9842,0.2957},{0.9842,0.2957},{0.0039,0.2838},{0.0039,0.2838},{0.9967,0.2838},{0.9967,0.2838},{0.9963,0.6419},{0.0164,0.6289},{0.016,0.6289},{0.016,0.6289},{0.0043,0.6419},{0.9846,0.6289},{0.0164,0.2957},{0.0164,0.2957}],Vector3f[{0.87411118,-0,-0.48567155},{0.87411118,-0,-0.48567155},{0.42243722,-0,0.90636921},{-0.91378522,-0,0.40614033},{0.87411118,-0,-0.48567155},{-0.91378522,-0,0.40614033},{0.42243722,-0,0.90636921},{0.87411118,-0,-0.48567155},{-0,-1,-0},{-0.42539752,-0,-0.90496534},{-0,-1,-0},{-0.42539752,-0,-0.90496534},{-0.91378522,-0,0.40614033},{-0,0.99996948,-0},{-0.91378522,-0,0.40614033},{-0,-1,-0},{-0,-1,-0},{0.42243722,-0,0.90636921},{-0,1,-0},{-0.42539752,-0,-0.90496534},{-0,1,-0},{0.42243722,-0,0.90636921},{-0.42539752,-0,-0.90496534},{-0,1,-0}]);
        SetObjSurface('sitzfeldt: logo');
        RotateMatrixBy(Vector3f{1,0,0},Vector3f{0,0,0},-90); 
        MoveMatrixBy(Vector3f{logo_x,logo_z,0});
    ",
  "possibleChildren": [
    {
      "itemId": "sitzfeldt:FofoHocker"
    },
    {
      "itemId": "sitzfeldt:FofoMittelteil"
    },
    {
      "itemId": "sitzfeldt:FofoLinks"
    },
    {
      "itemId": "sitzfeldt:FofoEckeRechts"
    },
    {
      "itemId": "sitzfeldt:FofoKombielementLinks"
    },
    {
      "itemId": "sitzfeldt:FofoKombielementRechts"
    }
  ],
  "parentDockings": {
    "points": [
      {
        "mask": "LeftMask",
        "position": "{10,0,0}",
        "condition": "leftDockAvaliable && leftSideDockable && allowStraightLeft",
        "assignmentsOnUpdateSilent": {
          "kombiCounterRight": "kombiCounterRight"
        },
        "selfAssignments": {
          "onDock": {
            "nothingOnLeft": false,
            "allowKombiLeft": false
          },
          "onUnDock": {
            "nothingOnLeft": true,
            "allowKombiLeft": true,
            "kombiCounterLeft": 0
          }
        }
      },
      {
        "mask": "RightMask",
        "position": "{elementWidth-10,0,0}",
        "condition": "rightDockAvaliable && rightSideDockable && allowStraightRight",
        "assignmentsOnUpdateSilent": {
          "kombiCounterLeft": "kombiCounterLeft"
        },
        "selfAssignments": {
          "onDock": {
            "nothingOnRight": false,
            "allowKombiRight": false
          },
          "onUnDock": {
            "nothingOnRight": true,
            "allowKombiRight": true,
            "kombiCounterRight": 0
          }
        }
      },
      {
        "mask": "LeftKombiMask",
        "position": "{-5,0,0}",
        "condition": "leftDockAvaliable && leftSideDockable && allowKombiLeft && (kombiCounterRight < 2)",
        "assignmentsOnUpdateSilent": {
          "kombiCounterRight": "kombiCounterRight"
        },
        "selfAssignments": {
          "onDock": {
            "nothingOnLeft": false,
            "allowStraightLeft": false
          },
          "onUnDock": {
            "nothingOnLeft": true,
            "allowStraightLeft": true,
            "kombiCounterLeft": 0
          }
        }
      },
      {
        "mask": "RightKombiMask",
        "position": "{elementWidth-10,0,0}",
        "condition": "rightDockAvaliable && rightSideDockable && allowKombiRight && (kombiCounterLeft < 2)",
        "assignmentsOnUpdateSilent": {
          "kombiCounterLeft": "kombiCounterLeft"
        },
        "selfAssignments": {
          "onDock": {
            "nothingOnRight": false,
            "allowStraightRight": false
          },
          "onUnDock": {
            "nothingOnRight": true,
            "allowStraightRight": true,
            "kombiCounterRight": 0
          }
        }
      },
      {
        "mask": "hockerFront",
        "position": "{childDockShift,0,0}",
        "condition": "(!neighbourIsKombi)",
        "selfAssignments": {
          "onDock": {
            "nothingInFront": false
          },
          "onUnDock": {
            "nothingInFront": true
          }
        }
      }
    ]
  },
  "childDockings": {
    "points": [
      {
        "mask": "LeftMask",
        "position": "{elementWidth,0,0}",
        "condition": "rightSideDockable",
        "assignmentsOnUpdateSilent": {
          "kombiCounterLeft": "kombiCounterLeft"
        },
        "selfAssignments": {
          "onDock": {
            "nothingOnRight": false,
            "rightDockAvaliable": false
          },
          "onUnDock": {
            "nothingOnRight": true,
            "rightDockAvaliable": true
          }
        }
      },
      {
        "mask": "RightMask",
        "position": "{0,0,0}",
        "condition": "leftSideDockable",
        "assignmentsOnUpdateSilent": {
          "kombiCounterRight": "kombiCounterRight"
        },
        "selfAssignments": {
          "onDock": {
            "nothingOnLeft": false,
            "leftDockAvaliable": false
          },
          "onUnDock": {
            "nothingOnLeft": true,
            "leftDockAvaliable": true
          }
        }
      }
    ]
  }
}